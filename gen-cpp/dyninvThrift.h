/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dyninvThrift_H
#define dyninvThrift_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dyninv_types.h"

namespace com { namespace seafooler { namespace project {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class dyninvThriftIf {
 public:
  virtual ~dyninvThriftIf() {}
  virtual void CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla) = 0;
};

class dyninvThriftIfFactory {
 public:
  typedef dyninvThriftIf Handler;

  virtual ~dyninvThriftIfFactory() {}

  virtual dyninvThriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dyninvThriftIf* /* handler */) = 0;
};

class dyninvThriftIfSingletonFactory : virtual public dyninvThriftIfFactory {
 public:
  dyninvThriftIfSingletonFactory(const boost::shared_ptr<dyninvThriftIf>& iface) : iface_(iface) {}
  virtual ~dyninvThriftIfSingletonFactory() {}

  virtual dyninvThriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dyninvThriftIf* /* handler */) {}

 protected:
  boost::shared_ptr<dyninvThriftIf> iface_;
};

class dyninvThriftNull : virtual public dyninvThriftIf {
 public:
  virtual ~dyninvThriftNull() {}
  void CallFunc(const std::string& /* funcname */, const int32_t /* id */, const std::vector<std::string> & /* paraList */, const std::set<std::string> & /* paraSet */, const std::map<int32_t, std::string> & /* paraMap */, const MyClass& /* mycla */) {
    return;
  }
};

typedef struct _dyninvThrift_CallFunc_args__isset {
  _dyninvThrift_CallFunc_args__isset() : funcname(false), id(false), paraList(false), paraSet(false), paraMap(false), mycla(false) {}
  bool funcname :1;
  bool id :1;
  bool paraList :1;
  bool paraSet :1;
  bool paraMap :1;
  bool mycla :1;
} _dyninvThrift_CallFunc_args__isset;

class dyninvThrift_CallFunc_args {
 public:

  dyninvThrift_CallFunc_args(const dyninvThrift_CallFunc_args&);
  dyninvThrift_CallFunc_args& operator=(const dyninvThrift_CallFunc_args&);
  dyninvThrift_CallFunc_args() : funcname(), id(0) {
  }

  virtual ~dyninvThrift_CallFunc_args() throw();
  std::string funcname;
  int32_t id;
  std::vector<std::string>  paraList;
  std::set<std::string>  paraSet;
  std::map<int32_t, std::string>  paraMap;
  MyClass mycla;

  _dyninvThrift_CallFunc_args__isset __isset;

  void __set_funcname(const std::string& val);

  void __set_id(const int32_t val);

  void __set_paraList(const std::vector<std::string> & val);

  void __set_paraSet(const std::set<std::string> & val);

  void __set_paraMap(const std::map<int32_t, std::string> & val);

  void __set_mycla(const MyClass& val);

  bool operator == (const dyninvThrift_CallFunc_args & rhs) const
  {
    if (!(funcname == rhs.funcname))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(paraList == rhs.paraList))
      return false;
    if (!(paraSet == rhs.paraSet))
      return false;
    if (!(paraMap == rhs.paraMap))
      return false;
    if (!(mycla == rhs.mycla))
      return false;
    return true;
  }
  bool operator != (const dyninvThrift_CallFunc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dyninvThrift_CallFunc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dyninvThrift_CallFunc_pargs {
 public:


  virtual ~dyninvThrift_CallFunc_pargs() throw();
  const std::string* funcname;
  const int32_t* id;
  const std::vector<std::string> * paraList;
  const std::set<std::string> * paraSet;
  const std::map<int32_t, std::string> * paraMap;
  const MyClass* mycla;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dyninvThrift_CallFunc_result {
 public:

  dyninvThrift_CallFunc_result(const dyninvThrift_CallFunc_result&);
  dyninvThrift_CallFunc_result& operator=(const dyninvThrift_CallFunc_result&);
  dyninvThrift_CallFunc_result() {
  }

  virtual ~dyninvThrift_CallFunc_result() throw();

  bool operator == (const dyninvThrift_CallFunc_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dyninvThrift_CallFunc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dyninvThrift_CallFunc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class dyninvThrift_CallFunc_presult {
 public:


  virtual ~dyninvThrift_CallFunc_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class dyninvThriftClient : virtual public dyninvThriftIf {
 public:
  dyninvThriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dyninvThriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla);
  void send_CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla);
  void recv_CallFunc();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class dyninvThriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<dyninvThriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dyninvThriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CallFunc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  dyninvThriftProcessor(boost::shared_ptr<dyninvThriftIf> iface) :
    iface_(iface) {
    processMap_["CallFunc"] = &dyninvThriftProcessor::process_CallFunc;
  }

  virtual ~dyninvThriftProcessor() {}
};

class dyninvThriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  dyninvThriftProcessorFactory(const ::boost::shared_ptr< dyninvThriftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< dyninvThriftIfFactory > handlerFactory_;
};

class dyninvThriftMultiface : virtual public dyninvThriftIf {
 public:
  dyninvThriftMultiface(std::vector<boost::shared_ptr<dyninvThriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dyninvThriftMultiface() {}
 protected:
  std::vector<boost::shared_ptr<dyninvThriftIf> > ifaces_;
  dyninvThriftMultiface() {}
  void add(boost::shared_ptr<dyninvThriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CallFunc(funcname, id, paraList, paraSet, paraMap, mycla);
    }
    ifaces_[i]->CallFunc(funcname, id, paraList, paraSet, paraMap, mycla);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class dyninvThriftConcurrentClient : virtual public dyninvThriftIf {
 public:
  dyninvThriftConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dyninvThriftConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla);
  int32_t send_CallFunc(const std::string& funcname, const int32_t id, const std::vector<std::string> & paraList, const std::set<std::string> & paraSet, const std::map<int32_t, std::string> & paraMap, const MyClass& mycla);
  void recv_CallFunc(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
