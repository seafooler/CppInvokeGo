// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package project

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type DyninvThrift interface {
	// Parameters:
	//  - Funcname
	//  - ID
	//  - ParaList
	//  - ParaSet
	//  - ParaMap
	//  - Mycla
	CallFunc(funcname string, id int32, paraList []string, paraSet map[string]bool, paraMap map[int32]string, mycla *MyClass) (err error)
}

type DyninvThriftClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDyninvThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DyninvThriftClient {
	return &DyninvThriftClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDyninvThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DyninvThriftClient {
	return &DyninvThriftClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Funcname
//  - ID
//  - ParaList
//  - ParaSet
//  - ParaMap
//  - Mycla
func (p *DyninvThriftClient) CallFunc(funcname string, id int32, paraList []string, paraSet map[string]bool, paraMap map[int32]string, mycla *MyClass) (err error) {
	if err = p.sendCallFunc(funcname, id, paraList, paraSet, paraMap, mycla); err != nil {
		return
	}
	return p.recvCallFunc()
}

func (p *DyninvThriftClient) sendCallFunc(funcname string, id int32, paraList []string, paraSet map[string]bool, paraMap map[int32]string, mycla *MyClass) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("CallFunc", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DyninvThriftCallFuncArgs{
		Funcname: funcname,
		ID:       id,
		ParaList: paraList,
		ParaSet:  paraSet,
		ParaMap:  paraMap,
		Mycla:    mycla,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DyninvThriftClient) recvCallFunc() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "CallFunc" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CallFunc failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CallFunc failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CallFunc failed: invalid message type")
		return
	}
	result := DyninvThriftCallFuncResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

type DyninvThriftProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DyninvThrift
}

func (p *DyninvThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DyninvThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DyninvThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDyninvThriftProcessor(handler DyninvThrift) *DyninvThriftProcessor {

	self2 := &DyninvThriftProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["CallFunc"] = &dyninvThriftProcessorCallFunc{handler: handler}
	return self2
}

func (p *DyninvThriftProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type dyninvThriftProcessorCallFunc struct {
	handler DyninvThrift
}

func (p *dyninvThriftProcessorCallFunc) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DyninvThriftCallFuncArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CallFunc", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DyninvThriftCallFuncResult{}
	var err2 error
	if err2 = p.handler.CallFunc(args.Funcname, args.ID, args.ParaList, args.ParaSet, args.ParaMap, args.Mycla); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CallFunc: "+err2.Error())
		oprot.WriteMessageBegin("CallFunc", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("CallFunc", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Funcname
//  - ID
//  - ParaList
//  - ParaSet
//  - ParaMap
//  - Mycla
type DyninvThriftCallFuncArgs struct {
	Funcname string           `thrift:"funcname,1" json:"funcname"`
	ID       int32            `thrift:"id,2" json:"id"`
	ParaList []string         `thrift:"paraList,3" json:"paraList"`
	ParaSet  map[string]bool  `thrift:"paraSet,4" json:"paraSet"`
	ParaMap  map[int32]string `thrift:"paraMap,5" json:"paraMap"`
	Mycla    *MyClass         `thrift:"mycla,6" json:"mycla"`
}

func NewDyninvThriftCallFuncArgs() *DyninvThriftCallFuncArgs {
	return &DyninvThriftCallFuncArgs{}
}

func (p *DyninvThriftCallFuncArgs) GetFuncname() string {
	return p.Funcname
}

func (p *DyninvThriftCallFuncArgs) GetID() int32 {
	return p.ID
}

func (p *DyninvThriftCallFuncArgs) GetParaList() []string {
	return p.ParaList
}

func (p *DyninvThriftCallFuncArgs) GetParaSet() map[string]bool {
	return p.ParaSet
}

func (p *DyninvThriftCallFuncArgs) GetParaMap() map[int32]string {
	return p.ParaMap
}

var DyninvThriftCallFuncArgs_Mycla_DEFAULT *MyClass

func (p *DyninvThriftCallFuncArgs) GetMycla() *MyClass {
	if !p.IsSetMycla() {
		return DyninvThriftCallFuncArgs_Mycla_DEFAULT
	}
	return p.Mycla
}
func (p *DyninvThriftCallFuncArgs) IsSetMycla() bool {
	return p.Mycla != nil
}

func (p *DyninvThriftCallFuncArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Funcname = v
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ParaList = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.ParaList = append(p.ParaList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.ParaSet = tSet
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.ParaSet[_elem5] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]string, size)
	p.ParaMap = tMap
	for i := 0; i < size; i++ {
		var _key6 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		var _val7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val7 = v
		}
		p.ParaMap[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) readField6(iprot thrift.TProtocol) error {
	p.Mycla = &MyClass{}
	if err := p.Mycla.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mycla), err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallFunc_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DyninvThriftCallFuncArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funcname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:funcname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Funcname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.funcname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:funcname: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paraList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paraList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ParaList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ParaList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paraList: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paraSet", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paraSet: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ParaSet)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.ParaSet {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paraSet: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paraMap", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:paraMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.ParaMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ParaMap {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:paraMap: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mycla", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mycla: ", p), err)
	}
	if err := p.Mycla.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mycla), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mycla: ", p), err)
	}
	return err
}

func (p *DyninvThriftCallFuncArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DyninvThriftCallFuncArgs(%+v)", *p)
}

type DyninvThriftCallFuncResult struct {
}

func NewDyninvThriftCallFuncResult() *DyninvThriftCallFuncResult {
	return &DyninvThriftCallFuncResult{}
}

func (p *DyninvThriftCallFuncResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DyninvThriftCallFuncResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallFunc_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DyninvThriftCallFuncResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DyninvThriftCallFuncResult(%+v)", *p)
}
